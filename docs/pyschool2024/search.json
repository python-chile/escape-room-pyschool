[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "🐍 PySchool",
    "section": "",
    "text": "🏠 Home\nEste espacio ha sido creado con el objetivo de motivar a los estudiantes a conocer y aprender el lenguaje de programación Python. Dentro de este repositorio, encontrarás ejemplos autocontenidos que te ayudarán a entender y practicar los conceptos fundamentales de Python.\nPySchool es una iniciativa de la organización Python Chile y DUOC. Nuestro objetivo es proporcionar a la comunidad los recursos necesarios para aprender y mejorar sus habilidades en Python.\nLa PySchool tendrá lugar el Viernes 02 de agosto, en DUOC Sede Valparaíso, para alumnos invitados de distintos colegios de la V Región. Sin embargo, el material está disponible en línea para que cualquier interesado pueda participar.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>🏠 Home</span>"
    ]
  },
  {
    "objectID": "index.html#cronograma",
    "href": "index.html#cronograma",
    "title": "🐍 PySchool",
    "section": "📅 Cronograma",
    "text": "📅 Cronograma\n\n\n\n\n\n\n\n\n\nPrograma de actividades\n\n\nHorario de eventos del día\n\n\n\n\nInicio\nTérmino\nActividad\n\n\n\n\n9:00\n9:30\nAcreditación\n\n\n9:30\n10:15\nBienvenida y panel pythonistas\n\n\n10:30\n11:30\nTaller 1\n\n\n12:00\n13:00\nTaller 2\n\n\n13:00\n13:30\nCierre\n\n\n\n\n\n\n        \n\n\n\n\nTaller 1: Común para todos los participantes: Introducción a Python.\nTaller 2: Opcional, según la elección de cada participante: Python en Ciencias o Python en Ciencia de Datos.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>🏠 Home</span>"
    ]
  },
  {
    "objectID": "material/talleres/intro.html",
    "href": "material/talleres/intro.html",
    "title": "Primeros Pasos",
    "section": "",
    "text": "Programación\nPodríamos definir la esencia de la programación en una frase sencilla:\nLa programación permite delegar actividades repetitivas y tediosas a las máquinas, liberando a los humanos para que se concentren en desafíos más estimulantes. Estos desafíos suelen requerir creatividad, pensamiento crítico y un enfoque subjetivo.\nMediante la programación, comunicamos a la computadora instrucciones detalladas de las operaciones que deseamos que realice. Si la computadora no actúa como esperábamos, usualmente significa que no hemos especificado nuestras instrucciones con la claridad necesaria.\nLa programación es tanto un arte como una ciencia, una práctica mediante la cual traducimos ideas complejas en comandos que las máquinas puedan seguir eficientemente.",
    "crumbs": [
      "🚀 Talleres",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Primeros Pasos</span>"
    ]
  },
  {
    "objectID": "material/talleres/intro.html#programación",
    "href": "material/talleres/intro.html#programación",
    "title": "Primeros Pasos",
    "section": "",
    "text": "“Automatizar tareas para que sean ejecutadas por la computadora.”\n\n\n\n“Se dice que uno no comprende verdaderamente algo hasta que puede explicárselo a otro. En realidad, uno no lo entiende completamente hasta que puede explicárselo a una computadora.” — Donald Knuth",
    "crumbs": [
      "🚀 Talleres",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Primeros Pasos</span>"
    ]
  },
  {
    "objectID": "material/talleres/intro.html#python",
    "href": "material/talleres/intro.html#python",
    "title": "Primeros Pasos",
    "section": "Python",
    "text": "Python\nPython se ha consolidado como uno de los lenguajes de programación más populares del mundo, y su crecimiento puede atribuirse a tres factores clave:\n\nClaridad y simplicidad: Los programas escritos en Python suelen ser fáciles de leer y entender, ya que su sintaxis se asemeja mucho al inglés. Esto hace que sea accesible tanto para principiantes como para expertos.\nRico ecosistema de librerías: Python viene equipado con una extensa biblioteca estándar que cubre una amplia variedad de necesidades, desde operaciones matemáticas hasta manejo del sistema operativo, pasando por funciones de tiempo y fecha, entre otras.\nExtensibilidad: Python permite a los usuarios ampliar sus capacidades integrando otros lenguajes de programación. Esto es posible gracias a que se pueden escribir módulos en lenguajes como C o C++, los cuales pueden ser utilizados dentro de programas de Python, potenciando así su eficiencia y flexibilidad.\n\nEsta combinación de facilidad de uso, riqueza funcional y adaptabilidad hace que Python sea una herramienta poderosa para una variedad de aplicaciones en ciencia de datos, desarrollo web, automatización, y más.",
    "crumbs": [
      "🚀 Talleres",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Primeros Pasos</span>"
    ]
  },
  {
    "objectID": "material/talleres/intro.html#ejecutando-código-python",
    "href": "material/talleres/intro.html#ejecutando-código-python",
    "title": "Primeros Pasos",
    "section": "Ejecutando código Python",
    "text": "Ejecutando código Python\nPara trabajar con Python en una computadora, debes seguir estos pasos:\n\nInstalación de Python: Asegúrate de tener alguna versión de Python instalada en tu equipo.\nCreación de un programa: Escribe tu código en un archivo, como “mi_programa.py”.\nEjecución del programa: Utiliza Python para ejecutar el archivo, mediante el comando python mi_programa.py en la terminal.\n\nCon el aumento de la popularidad de Python, surgieron plataformas alternativas para su uso, como los notebooks (Jupyter Notebooks, Google Colab y otros), que ofrecen entornos interactivos y versátiles.\nEn PySchool, optamos por una tecnología innovadora que emula la ejecución de Python directamente en una página web. Esta opción no requiere instalaciones y puede usarse desde cualquier dispositivo con conexión a internet, aunque es importante reconocer que sigue siendo un ambiente simulado.\nEl entorno incluye tres botones en la parte superior del contenedor de código que permiten ejecutar el código, reiniciar el código a su estado inicial y copiar el código al portapapeles. A continuación, se muestra una imagen que ilustra estos botones:",
    "crumbs": [
      "🚀 Talleres",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Primeros Pasos</span>"
    ]
  },
  {
    "objectID": "material/talleres/intro.html#ejemplo-hola-mundo",
    "href": "material/talleres/intro.html#ejemplo-hola-mundo",
    "title": "Primeros Pasos",
    "section": "Ejemplo: 👋 Hola Mundo",
    "text": "Ejemplo: 👋 Hola Mundo\nEn el mundo de la programación, es una tradición comenzar aprendiendo a hacer que la computadora muestre el mensaje “Hola, Mundo” (o “Hello World”).\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nDesafío:\n\n\n\n\n\nIntenta modificar el código anterior para que, en lugar de “Hola, Mundo”, el mensaje incluya tu nombre. ¿Cómo cambiarías el saludo?\n\n\n\nPara hacer nuestro código más flexible y reutilizable, podemos introducir variables. Piensa en una variable como una caja con nombre donde puedes almacenar cosas como números, texto o cualquier tipo de dato. Utilizas un nombre para referirte a esta caja, permitiéndote acceder a su contenido más adelante en tu código. Además, puedes cambiar su contenido en cualquier momento simplemente almacenando algo nuevo en ella.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nDesafío:\n\n\n\n\n\n¿Qué hace el signo + en el ejemplo anterior? ¿Qué representan los símbolos \"?\n\n\n\nLa programación eficiente busca minimizar el trabajo repetitivo. Si una línea de código se utiliza varias veces, es práctico “empaquetarla” en una función. Esto hace el código más compacto y reduce la necesidad de múltiples modificaciones.\nObserva cómo se puede simplificar el código utilizando una función:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEn este ejemplo, hemos explorado la función print, cadenas de caracteres (strings), variables y funciones en Python. Además, Python ofrece varias funciones adicionales para manipular strings. ¿Qué hacen las siguientes funciones?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nRecuerda eliminar el carácter # para que la línea se ejecute y deje de ser un comentario.",
    "crumbs": [
      "🚀 Talleres",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Primeros Pasos</span>"
    ]
  },
  {
    "objectID": "material/talleres/taller_1.html",
    "href": "material/talleres/taller_1.html",
    "title": "Introducción a Python",
    "section": "",
    "text": "👋 Hola Mundo\nEl clásico primer programa en cualquier lenguaje de programación. Este ejercicio es una excelente manera de introducirse en el mundo de la programación, independientemente del lenguaje que se esté utilizando. En este caso, utilizaremos Python para imprimir “Hola, Mundo” en la pantalla. Este simple programa ayuda a los principiantes a familiarizarse con la sintaxis básica del lenguaje y el entorno de desarrollo.",
    "crumbs": [
      "🚀 Talleres",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Introducción a Python</span>"
    ]
  },
  {
    "objectID": "material/talleres/taller_1.html#hola-mundo",
    "href": "material/talleres/taller_1.html#hola-mundo",
    "title": "Introducción a Python",
    "section": "",
    "text": "Contexto\nEl programa “Hola Mundo” es tradicionalmente el primer programa que los programadores escriben cuando están aprendiendo un nuevo lenguaje de programación. Es una manera sencilla y efectiva de familiarizarse con la sintaxis del lenguaje, asegurarse de que el entorno de desarrollo está correctamente configurado y comprobar que el código se puede ejecutar correctamente. En Python, escribir un programa “Hola Mundo” es tan simple como usar la función print.\n\n\nObjetivos del Ejercicio\n\n\n\n\n\n\nDesafío:\n\n\n\n\n\nEl objetivo de este ejercicio es asegurarse de que tu entorno de desarrollo esté configurado correctamente y que puedes ejecutar un programa básico en Python.\n\n\n\n\nConfiguración del entorno: Asegurarse de que Python está instalado y configurado correctamente en tu sistema.\nEscribir el código: Escribir un programa sencillo que imprima “Hola, Mundo” en la pantalla.\nEjecutar el programa: Ejecutar el programa para ver el resultado y asegurarse de que todo funciona correctamente.\n\n\n\nCódigo para “Hola Mundo”\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nExplicación del Código\nEste código usa la función print para imprimir el texto “Hola, Mundo” en la pantalla. Aquí hay una breve explicación de los elementos clave:\n\nprint: print es una función incorporada en Python que se utiliza para mostrar texto en la pantalla.\n“Hola, Mundo”: El texto que queremos imprimir se coloca entre comillas dobles. En Python, las comillas dobles y simples se pueden usar indistintamente para definir cadenas de texto.\n\n\n\nEjemplo de Uso\nCuando ejecutas este código en tu entorno de desarrollo, deberías ver la salida siguiente en la pantalla:\nHola, Mundo\n\n\nPrueba y Modificación\nUna vez que has ejecutado el programa y confirmado que funciona, puedes intentar modificar el texto para imprimir diferentes mensajes. Por ejemplo, puedes cambiar el texto a “¡Bienvenido a Python!” y ejecutar el programa de nuevo para ver el nuevo mensaje en la pantalla.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEste ejercicio proporciona una base sólida para entender cómo funciona la función print en Python y es un paso fundamental hacia la construcción de programas más complejos. Además, garantiza que tu entorno de desarrollo está configurado correctamente para ejecutar programas en Python.",
    "crumbs": [
      "🚀 Talleres",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Introducción a Python</span>"
    ]
  },
  {
    "objectID": "material/talleres/taller_1.html#conversión-de-temperatura",
    "href": "material/talleres/taller_1.html#conversión-de-temperatura",
    "title": "Introducción a Python",
    "section": "🌡️ Conversión de Temperatura",
    "text": "🌡️ Conversión de Temperatura\nUn programa para convertir grados Celsius a Fahrenheit. Este ejercicio es ideal para practicar operaciones matemáticas básicas y el uso de funciones en Python.\n\nContexto\nLa conversión de temperatura es una operación común en muchos campos científicos, desde la meteorología hasta la física y la química. Conocer cómo convertir entre diferentes unidades de temperatura es esencial en muchas aplicaciones. En este ejercicio, utilizaremos la fórmula de conversión para transformar una temperatura dada en grados Celsius a su equivalente en grados Fahrenheit.\n\n\nFórmula de Conversión\nLa fórmula para convertir grados Celsius a Fahrenheit es:\n\\[ \\text{Fahrenheit} = \\left( \\text{Celsius} \\times \\frac{9}{5} \\right) + 32 \\]\n\n\nObjetivos del Ejercicio\n\n\n\n\n\n\nDesafío:\n\n\n\n\n\nEl objetivo de este ejercicio es escribir una función en Python que convierta grados Celsius a Fahrenheit y pruebe la función con un ejemplo.\n\n\n\n\nDefinir una función: Crearemos una función llamada celsius_a_fahrenheit que tome un parámetro: la temperatura en grados Celsius (celsius).\nImplementar la conversión: Usaremos la fórmula de conversión para calcular la temperatura en grados Fahrenheit.\nProbar la función: Probaremos la función con un valor de ejemplo y mostraremos el resultado.\n\n\n\nCódigo para Conversión de Temperatura\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nExplicación del Código\n\nParámetro de Entrada:\n\ncelsius: Un número que representa la temperatura en grados Celsius.\n\nFórmula de Conversión:\n\nLa función utiliza la fórmula \\((celsius \\times \\frac{9}{5}) + 32\\) para convertir la temperatura a grados Fahrenheit y devuelve el resultado.\n\n\n\n\nEjemplo de Uso\nEl código de ejemplo muestra cómo usar la función celsius_a_fahrenheit con un valor de temperatura de ejemplo (25 grados Celsius). Al ejecutar este ejemplo, se imprimirá 25 grados Celsius son 77.0 grados Fahrenheit.\n\n\nPrueba y Modificación\nLos estudiantes pueden modificar los valores de celsius para probar diferentes temperaturas y explorar cómo funciona la función. Por ejemplo:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEstos ejemplos permiten a los estudiantes ver cómo la función convierte distintas temperaturas en grados Celsius a su equivalente en grados Fahrenheit, reforzando su comprensión de la conversión de unidades y el uso de funciones en Python.",
    "crumbs": [
      "🚀 Talleres",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Introducción a Python</span>"
    ]
  },
  {
    "objectID": "material/talleres/taller_1.html#cálculo-del-índice-de-masa-corporal-imc",
    "href": "material/talleres/taller_1.html#cálculo-del-índice-de-masa-corporal-imc",
    "title": "Introducción a Python",
    "section": "🏋️‍♂️ Cálculo del Índice de Masa Corporal (IMC)",
    "text": "🏋️‍♂️ Cálculo del Índice de Masa Corporal (IMC)\nUn programa para calcular el IMC de una persona. Este ejercicio es útil para practicar operaciones matemáticas y el uso de funciones en Python.\n\nContexto\nEl Índice de Masa Corporal (IMC) es una medida de la grasa corporal basada en la altura y el peso de una persona. La fórmula para calcular el IMC es:\n\\[ \\text{IMC} = \\frac{\\text{peso}}{\\text{altura}^2} \\]\n\n\nObjetivos del Ejercicio\n\n\n\n\n\n\nDesafío:\n\n\n\n\n\nEl objetivo de este ejercicio es escribir una función en Python que calcule el IMC de una persona y pruebe la función con un ejemplo.\n\n\n\n\nDefinir una función: Crearemos una función llamada calcular_imc que tome dos parámetros: el peso (peso) y la altura (altura).\nImplementar el cálculo: Usaremos la fórmula del IMC para calcular el índice y devolver el resultado.\nProbar la función: Probaremos la función con valores de ejemplo y mostraremos el resultado.\n\n\n\nCódigo para el Cálculo del IMC\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nExplicación del Código\n\nParámetros de Entrada:\n\npeso: Un número que representa el peso de la persona en kilogramos.\naltura: Un número que representa la altura de la persona en metros.\n\nFórmula del IMC:\n\nLa función utiliza la fórmula \\(\\frac{peso}{altura^2}\\) para calcular el IMC y devuelve el resultado.\n\n\n\n\nEjemplo de Uso\nEl código de ejemplo muestra cómo usar la función calcular_imc con valores de ejemplo (70 kg de peso y 1.75 m de altura). Al ejecutar este ejemplo, se imprimirá Para un peso de 70 kg y una altura de 1.75 m, el IMC es 22.86.\n\n\nPrueba y Modificación\nLos estudiantes pueden modificar los valores de peso y altura para probar diferentes combinaciones y explorar cómo funciona la función. Por ejemplo:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEstos ejemplos permiten a los estudiantes ver cómo la función calcula el IMC para diferentes pesos y alturas, reforzando su comprensión de las operaciones matemáticas y el uso de funciones en Python.",
    "crumbs": [
      "🚀 Talleres",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Introducción a Python</span>"
    ]
  },
  {
    "objectID": "material/talleres/taller_1.html#verificación-de-año-bisiesto",
    "href": "material/talleres/taller_1.html#verificación-de-año-bisiesto",
    "title": "Introducción a Python",
    "section": "📅 Verificación de Año Bisiesto",
    "text": "📅 Verificación de Año Bisiesto\nEn este ejercicio, vamos a crear un programa que determine si un año es bisiesto. Este ejercicio es excelente para practicar el uso de operadores lógicos y condicionales en Python.\n\nContexto\nUn año bisiesto es un año que tiene 366 días en lugar de los 365 días habituales. Este día adicional se añade en febrero, que tiene 29 días en lugar de 28. Las reglas para determinar si un año es bisiesto son las siguientes:\n\nUn año es bisiesto si es divisible por 4.\nSin embargo, si el año es divisible por 100, no es un año bisiesto a menos que también sea divisible por 400.\n\n\n\nObjetivos del Ejercicio\n\n\n\n\n\n\nDesafío:\n\n\n\n\n\nEl objetivo de este ejercicio es escribir una función en Python que determine si un año es bisiesto o no, utilizando las reglas mencionadas anteriormente.\n\n\n\n\nDefinir una función: Crearemos una función llamada es_bisiesto que tome un parámetro: el año (anio) a verificar.\nImplementar la lógica: Usaremos operadores lógicos (and, or) y estructuras condicionales (if, else) para determinar si el año es bisiesto.\nProbar la función: Probaremos la función con diferentes años para asegurarnos de que funcione correctamente.\n\n\n\nCódigo para Verificación de Año Bisiesto\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nExplicación del Código\nEste código define una función llamada es_bisiesto que realiza lo siguiente:\n\nParámetro de Entrada:\n\nanio: Un entero que representa el año a verificar.\n\nLógica para Determinar Año Bisiesto:\n\nUtiliza operadores lógicos y condicionales para verificar las reglas de un año bisiesto.\nRegla 1: (anio % 4 == 0 and anio % 100 != 0) - Un año es bisiesto si es divisible por 4 y no es divisible por 100.\nRegla 2: (anio % 400 == 0) - Un año es bisiesto si es divisible por 400.\nSi alguna de las reglas es verdadera, la función devuelve True, indicando que el año es bisiesto. De lo contrario, devuelve False.\n\n\n\n\nEjemplo de Uso\nEl código de ejemplo muestra cómo usar la función es_bisiesto para verificar si el año 2024 es bisiesto. Al ejecutar este ejemplo, se imprimirá 2024 es un año bisiesto.\n\n\nPrueba y Modificación\nLos estudiantes pueden modificar el valor de anio para probar diferentes años y explorar cómo funciona la función. Por ejemplo:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEstos ejemplos permiten a los estudiantes ver cómo la función verifica si diferentes años son bisiestos, reforzando su comprensión del uso de operadores lógicos y estructuras condicionales en Python. Este ejercicio proporciona una excelente oportunidad para practicar la implementación de reglas lógicas y condicionales en Python, y es una forma efectiva de entender cómo aplicar reglas matemáticas para resolver problemas del mundo real.",
    "crumbs": [
      "🚀 Talleres",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Introducción a Python</span>"
    ]
  },
  {
    "objectID": "material/talleres/taller_1.html#calculadora-básica",
    "href": "material/talleres/taller_1.html#calculadora-básica",
    "title": "Introducción a Python",
    "section": "🧮 Calculadora Básica",
    "text": "🧮 Calculadora Básica\nEn este ejercicio, vamos a crear una simple calculadora que puede realizar operaciones básicas como suma, resta, multiplicación y división. Esta actividad es ideal para que los principiantes practiquen el uso de funciones, operadores aritméticos y estructuras condicionales en Python.\n\nContexto\nUna calculadora es una herramienta fundamental que permite realizar cálculos matemáticos básicos y complejos. En este ejercicio, nos centraremos en construir una calculadora que pueda manejar cuatro operaciones básicas: suma (+), resta (-), multiplicación (*) y división (/). Además, nos aseguraremos de manejar casos especiales como la división por cero, que no es una operación válida en matemáticas y debe ser tratada con cuidado en nuestro código.\n\n\nObjetivos del Ejercicio\n\n\n\n\n\n\nDesafío:\n\n\n\n\n\nEl objetivo de este ejercicio es escribir una función en Python que pueda realizar las operaciones básicas de una calculadora y manejar casos especiales como la división por cero.\n\n\n\n\nDefinir una función: Crearemos una función llamada calculadora que tome tres parámetros: la operación a realizar (operacion) y dos números (num1 y num2).\nImplementar las operaciones: Usaremos estructuras condicionales (if, elif, else) para definir las operaciones aritméticas básicas.\nManejo de errores: Incluiremos una verificación para la división por cero y devolveremos un mensaje de error apropiado.\nProbar la función: Probaremos la función con diferentes operaciones y valores para asegurarnos de que funcione correctamente.\n\n\n\nCódigo de la Calculadora\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nExplicación del Código\nEste código define una función llamada calculadora que realiza lo siguiente:\n\nParámetros de Entrada:\n\noperacion: Un string que indica la operación a realizar (+, -, *, /).\nnum1: El primer número para la operación.\nnum2: El segundo número para la operación.\n\nEstructura Condicional:\n\nUsa if, elif, y else para verificar qué operación se debe realizar.\nRealiza la operación correspondiente y devuelve el resultado en un formato de cadena que incluye el texto “Resultado:”.\n\nManejo de Errores:\n\nPara la operación de división (/), verifica si num2 es diferente de cero antes de realizar la división. Si num2 es cero, devuelve un mensaje de error “Error: División por cero”.\nSi se proporciona una operación no válida, devuelve “Operación no válida”.\n\n\n\n\nEjemplo de Uso\nEl código de ejemplo muestra cómo usar la función calculadora con una operación de suma (+), y los números 10 y 5. Al ejecutar este ejemplo, se imprimirá Para la operación 10 + 5, el resultado es Resultado: 15.\n\n\nPrueba y Modificación\nLos estudiantes pueden modificar los valores de operacion, num1, y num2 para probar diferentes cálculos y explorar cómo funciona la función. Por ejemplo:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEstos ejemplos permiten a los estudiantes ver cómo la función realiza diferentes operaciones aritméticas y maneja casos especiales como la división por cero, reforzando su comprensión del uso de funciones, operadores aritméticos y estructuras condicionales en Python.",
    "crumbs": [
      "🚀 Talleres",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Introducción a Python</span>"
    ]
  },
  {
    "objectID": "material/talleres/taller_1.html#número-primo",
    "href": "material/talleres/taller_1.html#número-primo",
    "title": "Introducción a Python",
    "section": "🔢 Número Primo",
    "text": "🔢 Número Primo\nUn programa para verificar si un número es primo. Este ejercicio es útil para practicar el uso de bucles, estructuras condicionales y funciones en Python.\n\nContexto\nUn número primo es un número mayor que 1 que no tiene divisores positivos además de 1 y sí mismo. Este ejercicio consiste en determinar si un número dado es primo.\n\n\nObjetivos del Ejercicio\n\n\n\n\n\n\nDesafío:\n\n\n\n\n\nEl objetivo de este ejercicio es escribir una función en Python que verifique si un número es primo y pruebe la función con un ejemplo.\n\n\n\n\nDefinir una función: Crearemos una función llamada es_primo que tome un parámetro: el número a verificar (n).\nImplementar la verificación: Usaremos un bucle para comprobar si el número tiene divisores distintos de 1 y sí mismo.\nProbar la función: Probaremos la función con un valor de ejemplo y mostraremos el resultado.\n\n\n\nCódigo para Verificación de Número Primo\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nExplicación del Código\nEste código define una función llamada es_primo que realiza lo siguiente:\n\nParámetro de Entrada:\n\nn: Un entero que representa el número a verificar.\n\nLógica de Verificación:\n\nSi n es menor o igual a 1, la función devuelve False indicando que no es un número primo.\nUsa un bucle for para iterar desde 2 hasta la raíz cuadrada de n. Si n es divisible por cualquier número en este rango, la función devuelve False indicando que no es un número primo.\nSi el bucle termina sin encontrar divisores, la función devuelve True indicando que el número es primo.\n\n\n\n\nEjemplo de Uso\nEl código de ejemplo muestra cómo usar la función es_primo con un valor de ejemplo (29). Al ejecutar este ejemplo, se imprimirá 29 es un número primo.\n\n\nPrueba y Modificación\nLos estudiantes pueden modificar el valor de numero para probar diferentes números y explorar cómo funciona la función. Por ejemplo:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEstos ejemplos permiten a los estudiantes ver cómo la función verifica si diferentes números son primos, reforzando su comprensión de los bucles, las estructuras condicionales y las funciones en Python. Este ejercicio proporciona una excelente oportunidad para practicar la implementación de reglas matemáticas y condicionales en Python, y es una forma efectiva de entender cómo aplicar algoritmos para resolver problemas del mundo real.",
    "crumbs": [
      "🚀 Talleres",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Introducción a Python</span>"
    ]
  },
  {
    "objectID": "material/talleres/taller_1.html#conjetura-de-collatz",
    "href": "material/talleres/taller_1.html#conjetura-de-collatz",
    "title": "Introducción a Python",
    "section": "📜 Conjetura de Collatz",
    "text": "📜 Conjetura de Collatz\nEn este ejercicio, vamos a crear un programa que implemente la Conjetura de Collatz, también conocida como la conjetura 3n + 1. Este ejercicio es excelente para practicar el uso de bucles, listas y estructuras condicionales en Python.\n\nContexto\nLa Conjetura de Collatz es un problema matemático no resuelto que involucra una secuencia de números. Comienza con cualquier número positivo entero n y aplica las siguientes reglas repetidamente:\n\nSi n es par, se divide por 2.\nSi n es impar, se multiplica por 3 y se le suma 1.\n\nLa conjetura afirma que, no importa qué valor inicial se elija, la secuencia siempre llegará a 1.\n\n\nObjetivos del Ejercicio\n\n\n\n\n\n\nDesafío:\n\n\n\n\n\nEl objetivo de este ejercicio es escribir una función en Python que implemente la Conjetura de Collatz y genere la secuencia de números hasta llegar a 1.\n\n\n\n\nDefinir una función: Crearemos una función llamada conjetura_de_collatz que tome un parámetro: el número inicial (n).\nImplementar la lógica: Usaremos un bucle while para generar la secuencia de números aplicando las reglas de la conjetura.\nProbar la función: Probaremos la función con un número inicial y mostraremos la secuencia generada.\n\n\n\nCódigo para la Conjetura de Collatz\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nExplicación del Código\nEste código define una función llamada conjetura_de_collatz que realiza lo siguiente:\n\nParámetro de Entrada:\n\nn: Un entero positivo que representa el número inicial de la secuencia.\n\nLista de Resultados:\n\nresultado: Una lista que almacenará la secuencia de números generada por la conjetura.\n\nLógica del Bucle:\n\nUsa un bucle while que continúa hasta que n sea igual a 1.\nEn cada iteración, añade el valor actual de n a la lista resultado.\nSi n es par, lo divide por 2 usando n // 2.\nSi n es impar, lo multiplica por 3 y le suma 1 usando 3 * n + 1.\n\nAñadir el Valor Final:\n\nDespués de salir del bucle, añade el valor final 1 a la lista resultado.\n\nDevolver la Secuencia:\n\nLa función devuelve la lista resultado que contiene la secuencia completa de números.\n\n\n\n\nEjemplo de Uso\nEl código de ejemplo muestra cómo usar la función conjetura_de_collatz con un número inicial de 6. Al ejecutar este ejemplo, se imprimirá la secuencia generada, mostrando cada número en la secuencia hasta llegar a 1.\n6 -&gt; 3 -&gt; 10 -&gt; 5 -&gt; 16 -&gt; 8 -&gt; 4 -&gt; 2 -&gt; 1\n\n\nPrueba y Modificación\nLos estudiantes pueden modificar el valor de numero para probar diferentes números iniciales y explorar cómo funciona la secuencia de la Conjetura de Collatz. Por ejemplo:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEstos ejemplos permiten a los estudiantes ver cómo la función genera diferentes secuencias según el número inicial, reforzando su comprensión del uso de bucles, listas y estructuras condicionales en Python. Este ejercicio no solo es una excelente práctica de programación, sino que también introduce a los estudiantes a un fascinante problema matemático.",
    "crumbs": [
      "🚀 Talleres",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Introducción a Python</span>"
    ]
  },
  {
    "objectID": "material/talleres/taller_2.html",
    "href": "material/talleres/taller_2.html",
    "title": "Python en Ciencia",
    "section": "",
    "text": "1. 🔬 Física",
    "crumbs": [
      "🚀 Talleres",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Python en Ciencia</span>"
    ]
  },
  {
    "objectID": "material/talleres/taller_2.html#simulación-de-movimiento",
    "href": "material/talleres/taller_2.html#simulación-de-movimiento",
    "title": "Python en Ciencia",
    "section": "Simulación de Movimiento",
    "text": "Simulación de Movimiento\nEn este ejercicio, vamos a simular el movimiento de un objeto bajo la influencia de la gravedad y visualizar la trayectoria usando la biblioteca matplotlib. Este ejercicio es excelente para practicar el uso de bibliotecas de visualización y operaciones matemáticas en Python.\n\nContexto\nLa simulación de movimientos es una aplicación común en física y matemáticas. En este ejercicio, simularemos la trayectoria de un proyectil lanzado con una velocidad inicial y un ángulo de lanzamiento específicos. Usaremos las ecuaciones del movimiento para calcular la posición del proyectil en diferentes momentos y visualizaremos la trayectoria usando matplotlib.\n\n\nObjetivos del Ejercicio\n\n\n\n\n\n\nDesafío:\n\n\n\n\n\nEl objetivo de este ejercicio es escribir una función en Python que simule el movimiento de un proyectil bajo la influencia de la gravedad, visualizando la trayectoria con matplotlib.\n\n\n\n\nDefinir los parámetros de la simulación: Establecer valores para la gravedad, el tiempo, la velocidad inicial y el ángulo de lanzamiento.\nCalcular la trayectoria del proyectil: Usar las ecuaciones del movimiento para determinar las posiciones x y y del proyectil en función del tiempo.\nVisualizar la trayectoria: Crear una gráfica que muestre la trayectoria del proyectil, añadiendo efectos visuales para mejorar la presentación.\nProbar la simulación: Ajustar los parámetros para ver cómo afectan la trayectoria del proyectil.\n\n\n\nCódigo para la Simulación de Movimiento\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nExplicación del Código\nEste código define la simulación de movimiento de un proyectil y realiza lo siguiente:\n\nParámetros de Entrada:\n\ng: Aceleración debido a la gravedad (m/s²).\nt: Tiempo en segundos, generando 100 puntos entre 0 y 5 segundos.\nv0: Velocidad inicial del proyectil (m/s).\ntheta: Ángulo de lanzamiento convertido a radianes.\n\nComponentes de la Velocidad Inicial:\n\nvx: Componente horizontal de la velocidad inicial.\nvy: Componente vertical de la velocidad inicial.\n\nTrayectoria:\n\nx: Posición horizontal en función del tiempo.\ny: Posición vertical en función del tiempo considerando la gravedad.\n\nPunto Más Alto:\n\nCalcula y anota el punto más alto de la trayectoria del proyectil.\n\nVisualización:\n\nConfigura la visualización de la trayectoria usando matplotlib, añadiendo efectos visuales como un color degradado, un fondo personalizado, y un sol con rayos.\n\n\n\n\nEjemplo de Uso\nEl código de ejemplo muestra cómo usar los parámetros definidos para simular la trayectoria de un proyectil con una velocidad inicial de 20 m/s y un ángulo de lanzamiento de 45 grados.\n\n\nPrueba y Modificación\nPara hacer el ejemplo más entretenido, los estudiantes pueden cambiar los siguientes parámetros y observar cómo afectan la trayectoria del proyectil:\n\nVelocidad Inicial (v0):\n\nCambiar v0 a diferentes valores como 10, 30 o 50 m/s para ver cómo la velocidad inicial afecta la distancia y altura máxima alcanzada.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nÁngulo de Lanzamiento (theta):\n\nCambiar theta a diferentes ángulos como 30, 60 o 75 grados para ver cómo el ángulo de lanzamiento afecta la trayectoria.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nTiempo (t):\n\nCambiar el rango de tiempo y la cantidad de puntos en el tiempo para observar trayectorias más largas o más cortas.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nEstos cambios permiten a los estudiantes experimentar con diferentes escenarios y entender mejor cómo las variables iniciales afectan el movimiento de un proyectil, haciendo el ejercicio más interactivo y entretenido.",
    "crumbs": [
      "🚀 Talleres",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Python en Ciencia</span>"
    ]
  },
  {
    "objectID": "material/talleres/taller_2.html#simulación-de-movimiento-armónico-simple",
    "href": "material/talleres/taller_2.html#simulación-de-movimiento-armónico-simple",
    "title": "Python en Ciencia",
    "section": "Simulación de Movimiento Armónico Simple",
    "text": "Simulación de Movimiento Armónico Simple\nEn este ejercicio, vamos a simular el movimiento de un oscilador armónico simple y visualizar la posición del oscilador en función del tiempo usando la biblioteca matplotlib. Este ejercicio es excelente para practicar el uso de bibliotecas de visualización y operaciones matemáticas en Python.\n\nContexto\nEl movimiento armónico simple es un tipo de oscilación que se describe con la ecuación diferencial de un resorte ideal sin fricción. La posición del oscilador en función del tiempo se puede describir usando la función coseno. Este tipo de movimiento es común en sistemas físicos como péndulos y resortes.\n\n\nObjetivos del Ejercicio\n\n\n\n\n\n\nDesafío:\n\n\n\n\n\nEl objetivo de este ejercicio es escribir una función en Python que simule el movimiento de un oscilador armónico simple y visualice la posición del oscilador en función del tiempo usando matplotlib.\n\n\n\n\nImportar bibliotecas: Usaremos numpy para las operaciones matemáticas y matplotlib para la visualización.\nDefinir parámetros del oscilador: Estableceremos los parámetros como la masa del oscilador, la constante del resorte, la frecuencia angular y la amplitud.\nCalcular la posición: Usaremos la fórmula del movimiento armónico simple para calcular la posición del oscilador en diferentes momentos.\nVisualizar la posición: Crearemos una gráfica de la posición del oscilador en función del tiempo utilizando matplotlib.\n\n\n\nCódigo para la Simulación de Movimiento Armónico Simple\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nExplicación del Código\nEste código define la simulación del movimiento de un oscilador armónico simple y realiza lo siguiente:\n\nParámetros de Entrada:\n\nm: Masa del oscilador (kg).\nk: Constante del resorte (N/m).\nomega: Frecuencia angular (rad/s), calculada a partir de m y k.\nA: Amplitud del movimiento (m).\nt: Tiempo en segundos, generando 500 puntos entre 0 y 10 segundos.\n\nPosición como Función del Tiempo:\n\nx: Posición del oscilador en función del tiempo usando la fórmula del movimiento armónico simple ( x = A (t) ).\n\nVisualización:\n\nConfigura la visualización de la posición del oscilador usando matplotlib, añadiendo efectos visuales como un color degradado y un fondo personalizado.\nAnota puntos de interés como la amplitud máxima.\n\n\n\n\nEjemplo de Uso\nEl código de ejemplo muestra cómo usar los parámetros definidos para simular la posición de un oscilador con una masa de 5 kg, una constante del resorte de 10 N/m, una amplitud de 25 m y una frecuencia angular calculada.\n\n\nPrueba y Modificación\nPara hacer el ejemplo más entretenido, los estudiantes pueden cambiar los siguientes parámetros y observar cómo afectan la posición del oscilador:\n\nMasa del Oscilador (m):\n\nCambiar m a diferentes valores como 2.0, 8.0 o 10.0 kg para ver cómo la masa afecta la frecuencia angular y el movimiento.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nConstante del Resorte (k):\n\nCambiar k a diferentes valores como 5.0, 20.0 o 50.0 N/m para ver cómo la constante del resorte afecta la frecuencia angular y el movimiento.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nAmplitud (A):\n\nCambiar A a diferentes valores como 10, 50 o 75 m para ver cómo la amplitud afecta la posición del oscilador.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nTiempo (t):\n\nCambiar el rango de tiempo y la cantidad de puntos en el tiempo para observar oscilaciones más largas o más cortas.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nEstos cambios permiten a los estudiantes experimentar con diferentes escenarios y entender mejor cómo las variables iniciales afectan el movimiento del oscilador armónico simple, haciendo el ejercicio más interactivo y entretenido.",
    "crumbs": [
      "🚀 Talleres",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Python en Ciencia</span>"
    ]
  },
  {
    "objectID": "material/talleres/taller_2.html#lanzamiento-de-moneda",
    "href": "material/talleres/taller_2.html#lanzamiento-de-moneda",
    "title": "Python en Ciencia",
    "section": "Lanzamiento de Moneda",
    "text": "Lanzamiento de Moneda\nEn este ejercicio, vamos a simular el lanzamiento de una moneda y calcular la probabilidad de obtener cara o cruz. Este ejercicio es excelente para practicar el uso de arrays y funciones estadísticas en Python con la biblioteca numpy.\n\nContexto\nEl lanzamiento de una moneda es un experimento clásico en probabilidad. En cada lanzamiento, hay una probabilidad del 50% de obtener cara y una probabilidad del 50% de obtener cruz. Simulando múltiples lanzamientos, podemos estimar las probabilidades experimentales y compararlas con las probabilidades teóricas.\n\n\nObjetivos del Ejercicio\n\n\n\n\n\n\nDesafío:\n\n\n\n\n\nEl objetivo de este ejercicio es escribir un programa en Python que simule el lanzamiento de una moneda, cuente las ocurrencias de cara y cruz, y calcule las probabilidades de cada resultado.\n\n\n\n\nImportar bibliotecas: Usaremos numpy para generar los lanzamientos de la moneda y calcular las frecuencias.\nSimular lanzamientos: Generaremos un número específico de lanzamientos de la moneda utilizando numpy.random.choice.\nCalcular frecuencias: Contaremos las ocurrencias de cara y cruz.\nCalcular probabilidades: Calcularemos las probabilidades de obtener cara y cruz basadas en las frecuencias.\nMostrar los resultados: Imprimiremos las frecuencias y probabilidades calculadas.\n\n\n\nCódigo para el Lanzamiento de Moneda\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nExplicación del Código\nEste código simula el lanzamiento de una moneda y realiza lo siguiente:\n\nNúmero de Lanzamientos:\n\nn_lanzamientos: Define el número de lanzamientos a simular.\n\nSimulación de Lanzamientos:\n\nlanzamientos: Utiliza np.random.choice para generar una secuencia de ‘Cara’ y ‘Cruz’.\n\nCálculo de Frecuencias:\n\ncaras: Cuenta el número de veces que aparece ‘Cara’.\ncruces: Cuenta el número de veces que aparece ‘Cruz’.\n\nCálculo de Probabilidades:\n\nprob_cara: Calcula la probabilidad de obtener ‘Cara’.\nprob_cruz: Calcula la probabilidad de obtener ‘Cruz’.\n\nVisualización:\n\nGráfico de barras para mostrar la frecuencia de cada resultado.\nGráfico de líneas para mostrar las probabilidades acumuladas de cada resultado a lo largo de los lanzamientos.\n\n\n\n\nEjemplo de Uso\nEl código de ejemplo muestra cómo simular 100 lanzamientos de una moneda y calcular las probabilidades de obtener cara o cruz. Los resultados se muestran en gráficos para facilitar la visualización.\n\n\nPrueba y Modificación\nPara hacer el ejemplo más entretenido, los estudiantes pueden cambiar los siguientes parámetros y observar cómo afectan los resultados:\n\nNúmero de Lanzamientos (n_lanzamientos):\n\nCambiar n_lanzamientos a diferentes valores como 200, 500 o 1000 para ver cómo el número de lanzamientos afecta la precisión de las probabilidades calculadas.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nEstos cambios permiten a los estudiantes experimentar con diferentes escenarios y entender mejor cómo las variables iniciales afectan los resultados de la simulación, haciendo el ejercicio más interactivo y entretenido.",
    "crumbs": [
      "🚀 Talleres",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Python en Ciencia</span>"
    ]
  },
  {
    "objectID": "material/talleres/taller_2.html#lanzamiento-de-dados",
    "href": "material/talleres/taller_2.html#lanzamiento-de-dados",
    "title": "Python en Ciencia",
    "section": "Lanzamiento de Dados",
    "text": "Lanzamiento de Dados\nEn este ejercicio, vamos a simular el lanzamiento de dos dados y calcular la frecuencia de cada suma posible. Este ejercicio es excelente para practicar el uso de arrays, funciones estadísticas y diccionarios en Python con la biblioteca numpy.\n\nContexto\nEl lanzamiento de dos dados es un experimento clásico en probabilidad. Cada dado tiene seis caras, numeradas del 1 al 6. Cuando se lanzan dos dados, las sumas posibles de los números en las caras superiores van desde 2 hasta 12. Simulando múltiples lanzamientos, podemos calcular la frecuencia de cada suma y analizar la distribución de los resultados.\n\n\nObjetivos del Ejercicio\n\n\n\n\n\n\nDesafío:\n\n\n\n\n\nEl objetivo de este ejercicio es escribir un programa en Python que simule el lanzamiento de dos dados, calcule la frecuencia de cada suma posible y muestre los resultados.\n\n\n\n\nImportar bibliotecas: Usaremos numpy para generar los lanzamientos de los dados y calcular las frecuencias.\nSimular lanzamientos: Generaremos un número específico de lanzamientos de dos dados utilizando numpy.random.randint.\nCalcular sumas: Calcularemos las sumas de los resultados de los dos dados.\nCalcular frecuencias: Contaremos las ocurrencias de cada suma posible usando un diccionario.\nMostrar los resultados: Imprimiremos la frecuencia de cada suma calculada y visualizaremos los resultados con gráficos.\n\n\n\nCódigo para el Lanzamiento de Dados\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nExplicación del Código\nEste código simula el lanzamiento de dos dados y realiza lo siguiente:\n\nNúmero de Lanzamientos:\n\nn_lanzamientos: Define el número de lanzamientos a simular.\n\nSimulación de Lanzamientos:\n\ndado1 y dado2: Utiliza np.random.randint para generar los resultados de los lanzamientos de los dos dados.\nsumas: Calcula las sumas de los resultados de los dos dados.\n\nCálculo de Frecuencias:\n\nfrecuencias: Cuenta las ocurrencias de cada suma posible usando un diccionario.\n\nVisualización:\n\nGráfico de barras para mostrar la frecuencia de cada suma.\nGráfico de líneas para mostrar la frecuencia acumulada de las sumas.\nHistograma para mostrar la distribución de las sumas.\n\n\n\n\nEjemplo de Uso\nEl código de ejemplo muestra cómo simular 100 lanzamientos de dos dados y calcular la frecuencia de cada suma posible. Los resultados se muestran en gráficos para facilitar la visualización.\n\n\nPrueba y Modificación\nPara hacer el ejemplo más entretenido, los estudiantes pueden cambiar los siguientes parámetros y observar cómo afectan los resultados:\n\nNúmero de Lanzamientos (n_lanzamientos):\n\nCambiar n_lanzamientos a diferentes valores como 200, 500 o 1000 para ver cómo el número de lanzamientos afecta la precisión de las frecuencias calculadas.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nEstos cambios permiten a los estudiantes experimentar con diferentes escenarios y entender mejor cómo las variables iniciales afectan los resultados de la simulación, haciendo el ejercicio más interactivo y entretenido.",
    "crumbs": [
      "🚀 Talleres",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Python en Ciencia</span>"
    ]
  },
  {
    "objectID": "material/talleres/taller_3.html",
    "href": "material/talleres/taller_3.html",
    "title": "Python en Ciencia de Datos",
    "section": "",
    "text": "📊 Exploración y Visualización de Datos\nPrimero, importemos las bibliotecas necesarias y carguemos el conjunto de datos de Pokémon. Este ejercicio es excelente para practicar la manipulación de datos y la visualización con las bibliotecas pandas y matplotlib.",
    "crumbs": [
      "🚀 Talleres",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Python en Ciencia de Datos</span>"
    ]
  },
  {
    "objectID": "material/talleres/taller_3.html#exploración-y-visualización-de-datos",
    "href": "material/talleres/taller_3.html#exploración-y-visualización-de-datos",
    "title": "Python en Ciencia de Datos",
    "section": "",
    "text": "Cargar el Conjunto de Datos\n\n\n\n\n\n\nDesafío:\n\n\n\n\n\nEl objetivo de este ejercicio es cargar un conjunto de datos de Pokémon desde una URL y mostrar las primeras filas para obtener una vista previa de los datos.\n\n\n\n\nImportar bibliotecas: Usar pandas para manipulación de datos.\nCargar datos: Leer el conjunto de datos desde una URL.\nMostrar datos: Mostrar las primeras filas del conjunto de datos.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nDescripción del Conjunto de Datos\n\n\n\n\n\n\nDesafío:\n\n\n\n\n\nEl objetivo de este ejercicio es obtener una visión general de las estadísticas del conjunto de datos para comprender mejor la distribución de los valores.\n\n\n\n\nDescripción estadística: Usar describe para obtener estadísticas básicas del conjunto de datos.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "🚀 Talleres",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Python en Ciencia de Datos</span>"
    ]
  },
  {
    "objectID": "material/talleres/taller_3.html#análisis-y-visualización-de-datos",
    "href": "material/talleres/taller_3.html#análisis-y-visualización-de-datos",
    "title": "Python en Ciencia de Datos",
    "section": "📈 Análisis y Visualización de Datos",
    "text": "📈 Análisis y Visualización de Datos\n\nTipos de Pokémon\n\n\n\n\n\n\nDesafío:\n\n\n\n\n\nEl objetivo de este ejercicio es contar cuántos Pokémon de cada tipo hay en el conjunto de datos y visualizar estos datos en un gráfico de barras.\n\n\n\n\nContar Pokémon por tipo: Usar value_counts para contar los Pokémon por tipo.\nCrear gráfico de barras: Usar matplotlib para visualizar la cantidad de Pokémon por tipo.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nPromedio de Estadísticas por Tipo\n\n\n\n\n\n\nDesafío:\n\n\n\n\n\nEl objetivo de este ejercicio es calcular y visualizar el promedio de las estadísticas principales de los Pokémon agrupados por tipo en un gráfico de barras apiladas.\n\n\n\n\nCalcular promedios: Usar groupby y mean para calcular el promedio de estadísticas por tipo.\nGráfico de barras apiladas: Usar plot para visualizar los promedios.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nEstadísticas de Ataque y Defensa\n\n\n\n\n\n\nDesafío:\n\n\n\n\n\nEl objetivo de este ejercicio es comparar las estadísticas de ataque y defensa de los Pokémon en un gráfico de dispersión.\n\n\n\n\nGráfico de dispersión: Usar scatter para visualizar la relación entre ataque y defensa.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nPeso y Altura de los Pokémon\n\n\n\n\n\n\nDesafío:\n\n\n\n\n\nEl objetivo de este ejercicio es explorar la relación entre el peso y la altura de los Pokémon utilizando estadísticas simuladas.\n\n\n\n\nSimular datos: Crear columnas de peso y altura simuladas.\nGráfico de dispersión: Usar scatter para visualizar la relación entre peso y altura.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "🚀 Talleres",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Python en Ciencia de Datos</span>"
    ]
  },
  {
    "objectID": "material/talleres/taller_3.html#tablas-y-gráficos-interactivos",
    "href": "material/talleres/taller_3.html#tablas-y-gráficos-interactivos",
    "title": "Python en Ciencia de Datos",
    "section": "📊 Tablas y Gráficos Interactivos",
    "text": "📊 Tablas y Gráficos Interactivos\n\nTabla de Pokémon con Mayor Ataque\n\n\n\n\n\n\nDesafío:\n\n\n\n\n\nEl objetivo de este ejercicio es mostrar los 10 Pokémon con la mayor estadística de ataque.\n\n\n\n\nTop 10 en ataque: Usar nlargest para obtener los Pokémon con mayor ataque.\nMostrar tabla: Mostrar una tabla con los resultados.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nTabla de Pokémon con Mayor Defensa\n\n\n\n\n\n\nDesafío:\n\n\n\n\n\nEl objetivo de este ejercicio es mostrar los 10 Pokémon con la mayor estadística de defensa.\n\n\n\n\nTop 10 en defensa: Usar nlargest para obtener los Pokémon con mayor defensa.\nMostrar tabla: Mostrar una tabla con los resultados.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "🚀 Talleres",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Python en Ciencia de Datos</span>"
    ]
  },
  {
    "objectID": "material/anexos/cierre_evento.html",
    "href": "material/anexos/cierre_evento.html",
    "title": "Cierre PySchool",
    "section": "",
    "text": "🎯 Retroalimentación\nNos encantaría saber que te ha parecido PySchool, y que podemos mejorar. Agradeceríamos contestaras la siguiente encuesta:\n\n \n\nhttps://forms.gle/MjQFihE1RiKzVgid9\n\n\n\n\n\nCódigo para sorteo\nPara sortear algunos premios utilizaremos, por supuesto, un código de python. Usaremos la función random.randint(a, b) que retorna un número entero aleatorio \\(N\\) que cumpla la condición \\(a &lt;= N &lt;= b\\).\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nCondiciones de uso de giftcards\nLas condiciones de uso de las giftcards para uso en el local café-robots-galletas tienen las siguientes condiciones:\n\nCada giftcard es válida para un único uso.\nLa giftcard no se puede cambiar por dinero en efectivo, ni se entregará vuelto.\nLa giftcard se puede usar para cualquier producto en venta en el local.\nCada giftcard tiene vigencia de 3 meses (hasta el 31 de octubre).",
    "crumbs": [
      "📜 Anexos",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Cierre PySchool</span>"
    ]
  },
  {
    "objectID": "material/anexos/aprendizaje.html",
    "href": "material/anexos/aprendizaje.html",
    "title": "Seguir aprendiendo",
    "section": "",
    "text": "Recursos recomendados 📚",
    "crumbs": [
      "📜 Anexos",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Seguir aprendiendo</span>"
    ]
  },
  {
    "objectID": "material/anexos/aprendizaje.html#recursos-recomendados",
    "href": "material/anexos/aprendizaje.html#recursos-recomendados",
    "title": "Seguir aprendiendo",
    "section": "",
    "text": "Cursos en Línea\n\nCoursera: Cursos como “Python for Everybody” de la Universidad de Míchigan.\nedX: Programas de certificación profesional como “Programming for Everybody” del MIT.\nUdemy: Cursos completos, desde lo básico hasta temas avanzados como “Complete Python Bootcamp”.\n\nPlataformas Interactivas\n\nCodecademy: Curso interactivo de Python para principiantes.\nDataCamp: Cursos especializados en Python para ciencia de datos.\n\nDocumentación Oficial y Recursos Comunitarios\n\nDocumentación de Python: La fuente más confiable y detallada para aprender Python.\nStack Overflow: Comunidad activa para resolver dudas.\nGitHub: Repositorios de proyectos de código abierto en Python.\n\nLibros Recomendados\n\n“Automate the Boring Stuff with Python” de Al Sweigart.\n“Python Crash Course” de Eric Matthes.\n“Fluent Python” de Luciano Ramalho.",
    "crumbs": [
      "📜 Anexos",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Seguir aprendiendo</span>"
    ]
  },
  {
    "objectID": "material/anexos/aprendizaje.html#consejos-para-aprender-python",
    "href": "material/anexos/aprendizaje.html#consejos-para-aprender-python",
    "title": "Seguir aprendiendo",
    "section": "Consejos para Aprender Python",
    "text": "Consejos para Aprender Python\n\nPracticar regularmente\n\nEscribe código todos los días, incluso si es por poco tiempo.\n\nParticipar en proyectos reales\n\nContribuye a proyectos de código abierto en GitHub o crea tus propios proyectos.\n\nResolver ejercicios y retos\n\nPlataformas como LeetCode, HackerRank, y CodeWars ofrecen retos de programación.\n\nUnirse a comunidades\n\nParticipa en comunidades como r/learnpython en Reddit y Python Discord.\n\nMantenerse Actualizado\n\nSigue aprendiendo sobre nuevas versiones y mejores prácticas a través de blogs, conferencias y webinars.\n\n\nCon estos recursos y consejos, estarás en el camino correcto para dominar Python y aplicarlo en tus proyectos y carrera profesional.",
    "crumbs": [
      "📜 Anexos",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Seguir aprendiendo</span>"
    ]
  },
  {
    "objectID": "material/anexos/tecnologia.html",
    "href": "material/anexos/tecnologia.html",
    "title": "Sobre la página",
    "section": "",
    "text": "Esta página fue creada con quarto y la extensión quarto-pyodide\n\n\n\nFiltro quarto-pyodide en acción\n\n\nPuedes ver el ejemplo completo de la extensión en acción aquí.",
    "crumbs": [
      "📜 Anexos",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Sobre la página</span>"
    ]
  },
  {
    "objectID": "material/anexos/autoria.html",
    "href": "material/anexos/autoria.html",
    "title": "Autoría",
    "section": "",
    "text": "Reconocimientos adicionales\nQueremos extender un agradecimiento especial a todos los colaboradores y miembros de nuestra comunidad que han enriquecido este proyecto con sus ideas, sugerencias y aportes de código. Su participación ha sido crucial y es enormemente valorada.\nPara obtener más información sobre los autores y colaboradores, o para descubrir cómo puedes contribuir, te invitamos a visitar la página oficial de Python Chile. ¡Agradecemos tu apoyo y nos complace contar contigo en nuestra comunidad!",
    "crumbs": [
      "📜 Anexos",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Autoría</span>"
    ]
  },
  {
    "objectID": "material/anexos/colaborar.html",
    "href": "material/anexos/colaborar.html",
    "title": "Colaborar",
    "section": "",
    "text": "Cómo Contribuir",
    "crumbs": [
      "📜 Anexos",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Colaborar</span>"
    ]
  },
  {
    "objectID": "material/anexos/colaborar.html#cómo-contribuir",
    "href": "material/anexos/colaborar.html#cómo-contribuir",
    "title": "Colaborar",
    "section": "",
    "text": "Reportar Problemas\nSi encuentras errores, repórtalos creando un “issue” en nuestro repositorio de GitHub.\n\n\nProponer Mejoras\nPropon ideas creando un “issue” o enviando un “pull request” con tus sugerencias.\n\n\nContribuir con Código\n\nFork el repositorio: Crea una copia en tu cuenta de GitHub.\nClona tu fork:\ngit clone https://github.com/tu_usuario/pyschool_content.git\nCrea una rama:\ngit checkout -b mi_contribucion\nHaz tus cambios.\nCommit tus cambios:\ngit commit -m \"Descripción de mi contribución\"\nPush a tu fork:\ngit push origin mi_contribucion\nCrea un Pull Request: Describe tus cambios.\n\n\n\nDocumentación\nMejora la documentación siguiendo los mismos pasos.\n\n\nRevisión de Código\nAyuda revisando “pull requests” y proporcionando feedback constructivo.",
    "crumbs": [
      "📜 Anexos",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Colaborar</span>"
    ]
  },
  {
    "objectID": "material/anexos/colaborar.html#código-de-conducta",
    "href": "material/anexos/colaborar.html#código-de-conducta",
    "title": "Colaborar",
    "section": "Código de Conducta",
    "text": "Código de Conducta\nMantén un ambiente respetuoso. Lee nuestro Código de Conducta antes de contribuir.",
    "crumbs": [
      "📜 Anexos",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Colaborar</span>"
    ]
  }
]