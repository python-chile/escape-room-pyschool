---
title: "Habitaci√≥n 9:"
include-in-header:
  - file: setup.html
  - text: '<script> window.ROOM_CHALLENGE_URL = window.REPO_URL + "/sala_09.py"; </script>'
---

<center>
<img src="./img/sala_09.png" width="650">
</center>

<br/>

Desde el √°rea de mantenimiento üîß han enviado un listado objetos de la estaci√≥n espacial por reparar, sin embargo, el listado est√°
mezclado con objetos que ya est√°n en perfecto estado ‚úÖ.

‚ö†Ô∏è ¬°Cuidado! No gastes recursos en hacer mantenciones innecesarias. Crea un listado nuevo üìã separando
solo los objetos que realmente necesitan dicha mantenci√≥n ‚öôÔ∏è.

<div class="alert alert-info">
Aplica los siguientes elementos para tener una `lista` de objetos para la mantenci√≥n:

- Recorrer la lista `objetos`.
- Sentencia `if` para verificar si los `objetos` no est√°n (`not in`) en lista de `reparados`.
- Agregar elementos a la lista `por reparar` si la sentencia `if` se cumple.

</div>

::: {.callout-tip title="Pista" collapse="true"}
Ten en consideraci√≥n lo siguiente:

- Para recorrer una lista tiene el formato `for` objeto in lista, en este caso la _lista_ es `objetos
- Basta con una sentencia `if objeto not in reparados` para verificar que `objeto` no est√° dentro de lista de `reparados`
- Se debe agregar el `objeto` que cumpla la sentencia a la lista `por reparar` con la funci√≥n `.append(objeto)`

:::

```{pyodide-python}
# No elimines estas l√≠neas
import sala
objetos = ["linterna", "aud√≠fonos", "monitor principal", "motor de enfriador","monitor de repuesto", "antena", "filtro gases", "lentes infrarojo", "teclado"]
reparados= ["monitor de repuesto", "aud√≠fonos", "motor de enfriador"]
por_reparar = []

# Escribe tu respuesta aqu√≠

# No elimines esta l√≠nea
sala.revisar(por_reparar)
```